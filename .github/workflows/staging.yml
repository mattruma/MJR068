name: Staging

on:
  issues:
    types: [labeled]

jobs:
        
  check-issue-label:

    runs-on: ubuntu-latest
    
    outputs:
      exists: ${{ steps.CheckIssue.outputs.exists }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - run: npm install
        working-directory: ./.github/actions/check-issue
      - uses: ./.github/actions/check-issue
        id: CheckIssue
        with:
          label: staging-approved
         
  deploy-infrastructure:
    
    runs-on: ubuntu-latest
    needs: check-issue-label
    if: needs.check-issue-label.outputs.exists == 'true'
    env:
      SERVICE_PRINCIPALID: ""

    steps: 
    - uses: actions/checkout@master
    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} 
        enable-AzPSSession: true 
    - uses: azure/powershell@v1
      with:
        inlineScript: |
          $ResourceGroupLocation = "eastus"
          
          $ResourceGroupName = "mjr-068-stg-rg"
          $ResourceGroup = (Get-AzResourceGroup -Name $ResourceGroupName -ErrorAction SilentlyContinue)
          
          If ($null -eq $ResourceGroup) {
              $ResourceGroup = (New-AzResourceGroup `
                  -Name $ResourceGroupName `
                  -Location $ResourceGroupLocation)
          }

          $ServicePrincipal = Get-AzADServicePrincipal -DisplayName "mjr-068-sp"

          If ($null -eq $ServicePrincipal) { 
              Throw "The service principal $($ServicePrincipalName) does not exist."
          }

          $ServicePrincipalId = $ServicePrincipal.Id

          Write-Output "::set-env name=SERVICE_PRINCIPALID::$ServicePrincipalId"
        azPSVersion: '3.1.0'      
    - uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTIONID }}
        resourceGroupName: mjr-068-stg-rg
        template: ./src/FunctionApp1.Infrastructure/Deploy.json
        parameters: resourcePrefix=mjr-068-stg servicePrincipalId=${{ env.SERVICE_PRINCIPALID }}
    - uses: azure/powershell@v1
      with:
        inlineScript: |
          $DeployedOn = Get-Date
          $ResourceGroupName = "mjr-068-dev-rg"

          Set-AzResourceGroup -Name $ResourceGroupName -Tag @{DeployedBy = "github-actions"; DeployedOn = "$($DeployedOn)" }
        azPSVersion: '3.1.0' 
        
  deploy-code:

    needs: deploy-infrastructure
    runs-on: ubuntu-latest

    steps:
     - uses: actions/checkout@v2
     - name: Setup .NET Core
       uses: actions/setup-dotnet@v1
       with:
         dotnet-version: 3.1.301       
     - name: 'Run dotnet'
       shell: pwsh
       run: |
         pushd './.'
         dotnet build './src/FunctionApp1/' --configuration Release --output ./output
         popd
     - uses: Azure/login@v1
       with:
         creds: ${{ secrets.AZURE_CREDENTIALS }} 
         enable-AzPSSession: true 
     - name: 'Deploy code'
       uses: Azure/functions-action@v1
       with:
         app-name: mjr-068-stg-func
         package: './output'
  
  run-integration-tests:
  
    needs: deploy-code
    runs-on: ubuntu-latest

    steps:  
    - uses: actions/checkout@master
    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} 
        enable-AzPSSession: true 
    - uses: Azure/get-keyvault-secrets@v1.0
      with:
        keyvault: "mjr-068-stg-kv"
        secrets: 'StorageConnectionString1,FunctionApp1Code' 
      id: GetSecrets
    - uses: azure/powershell@v1
      with:
        inlineScript: |
          $ResourceGroupName = "mjr-068-stg-rg"
          
          Update-AzFunctionAppSetting -Name mjr-068-stg-func -ResourceGroupName $ResourceGroupName -AppSetting @{"StorageConnectionString" = "${{ steps.GetSecrets.outputs.StorageConnectionString1 }}"}
        azPSVersion: '3.1.0'   
    - name: 'Build postman environment file'           
      run: pwsh -command "./src/FunctionApp1.Tests/RunIntegrationTests_CreateParametersFile.ps1 -FunctionUrl 'mjr-068-stg-func.azurewebsites.net' -FunctionApp1Code ${{ steps.GetSecrets.outputs.FunctionApp1Code }}"
    - run: npm install newman
    - name: 'Run postman tests' 
      run: newman run ./src/FunctionApp1.Tests/postman_collection.json -e postman_environment.json --reporters cli,junit --reporter-junit-export ./JunitReport.xml
            
  create-approval-issue:

    needs: run-integration-tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - run: npm install
        working-directory: ./.github/actions/create-issue
      - uses: ./.github/actions/create-issue
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 
          title: Run stage approval pending FunctionApp - Production
          labels: production-approve
          assignees: mattruma
          body: "Your approval is required for stage 'Production' to use environment 'Production'.


To approve for deployment to 'Production' add the 'production-approved' label to the GitHub issue."

  add-label-to-issue:
 
    needs: run-integration-tests 
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - run: npm install
        working-directory: ./.github/actions/add-label-to-issue
      - uses: ./.github/actions/add-label-to-issue
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 
          issue_number: ${{ github.event.issue.number }}
          labels: staging-released

  close-issue:
 
    runs-on: ubuntu-latest
    needs: [create-approval-issue, add-label-to-issue]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - run: npm install
        working-directory: ./.github/actions/close-issue
      - uses: ./.github/actions/close-issue
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 
          issue_number: ${{ github.event.issue.number }}